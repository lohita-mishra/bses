/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bses.connection2.model.impl;

import com.bses.connection2.model.ConnectionRequest;
import com.bses.connection2.model.ConnectionRequestModel;
import com.bses.connection2.model.ConnectionRequestSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ConnectionRequest service. Represents a row in the &quot;bsesconn_ConnectionRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ConnectionRequestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConnectionRequestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ConnectionRequestImpl
 * @generated
 */
@JSON(strict = true)
public class ConnectionRequestModelImpl
	extends BaseModelImpl<ConnectionRequest> implements ConnectionRequestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a connection request model instance should use the <code>ConnectionRequest</code> interface instead.
	 */
	public static final String TABLE_NAME = "bsesconn_ConnectionRequest";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"connectionRequestId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"requestNo", Types.VARCHAR}, {"mobileNo", Types.VARCHAR},
		{"emailId", Types.VARCHAR}, {"requestDate", Types.TIMESTAMP},
		{"requestType", Types.VARCHAR}, {"consumerType", Types.VARCHAR},
		{"title", Types.VARCHAR}, {"firstName", Types.VARCHAR},
		{"middleName", Types.VARCHAR}, {"lastName", Types.VARCHAR},
		{"sonDaughterWife", Types.VARCHAR},
		{"fatherOrHusbandName", Types.VARCHAR}, {"firmName", Types.VARCHAR},
		{"signatoryName", Types.VARCHAR},
		{"signatoryDesignation", Types.VARCHAR},
		{"organizationType", Types.VARCHAR},
		{"incorporationDate", Types.TIMESTAMP}, {"gstIn", Types.VARCHAR},
		{"panNo", Types.VARCHAR}, {"locality", Types.VARCHAR},
		{"district", Types.VARCHAR}, {"houseNo", Types.VARCHAR},
		{"floor", Types.VARCHAR}, {"buildingName", Types.VARCHAR},
		{"street", Types.VARCHAR}, {"colonyArea", Types.VARCHAR},
		{"landmark", Types.VARCHAR}, {"landmarkDetails", Types.VARCHAR},
		{"pinCode", Types.VARCHAR}, {"connectionType", Types.VARCHAR},
		{"tariffCategory", Types.VARCHAR}, {"loadKva", Types.FLOAT},
		{"loadKw", Types.FLOAT}, {"areaType", Types.VARCHAR},
		{"premisesType", Types.VARCHAR}, {"upicAvailable", Types.BOOLEAN},
		{"upic", Types.VARCHAR}, {"wiringTest", Types.BOOLEAN},
		{"wiringCertificate", Types.VARCHAR}, {"elcbInstalled", Types.BOOLEAN},
		{"elcbDocument", Types.VARCHAR}, {"stiltParking", Types.BOOLEAN},
		{"height15Mtr", Types.BOOLEAN}, {"height17Mtr", Types.BOOLEAN},
		{"fcc", Types.BOOLEAN}, {"fccCertificate", Types.VARCHAR},
		{"lift", Types.BOOLEAN}, {"liftCertificate", Types.VARCHAR},
		{"agriConsumer", Types.BOOLEAN}, {"hasBdoCertificate", Types.BOOLEAN},
		{"bdoCertificate", Types.VARCHAR},
		{"hasDpccCertificate", Types.BOOLEAN},
		{"dpccCertificate", Types.VARCHAR},
		{"hasPollutionCertificate", Types.BOOLEAN},
		{"pollutionCertificate", Types.VARCHAR},
		{"eServiceOnMail", Types.BOOLEAN}, {"eServiceMailId", Types.VARCHAR},
		{"applicantPhoto", Types.VARCHAR}, {"applicantSignature", Types.BIGINT},
		{"idProofType", Types.VARCHAR}, {"idProofNo", Types.VARCHAR},
		{"idProofDocument", Types.VARCHAR},
		{"ownershipProofType", Types.VARCHAR},
		{"ownershipProofDocument", Types.VARCHAR},
		{"selfDeclaration", Types.BOOLEAN},
		{"selfDeclarationTime", Types.TIMESTAMP}, {"bpNumber", Types.VARCHAR},
		{"orderNo", Types.VARCHAR}, {"documentUploaded", Types.VARCHAR},
		{"sapOrderGenerated", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("connectionRequestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("requestNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobileNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("requestType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("consumerType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("middleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sonDaughterWife", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fatherOrHusbandName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firmName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signatoryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signatoryDesignation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("incorporationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gstIn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("panNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("district", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("houseNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("floor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("buildingName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("street", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("colonyArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landmark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landmarkDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pinCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("connectionType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tariffCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loadKva", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("loadKw", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("areaType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("premisesType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("upicAvailable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("upic", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("wiringTest", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("wiringCertificate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("elcbInstalled", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("elcbDocument", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stiltParking", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("height15Mtr", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("height17Mtr", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("fcc", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("fccCertificate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lift", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("liftCertificate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agriConsumer", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("hasBdoCertificate", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("bdoCertificate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasDpccCertificate", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("dpccCertificate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasPollutionCertificate", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("pollutionCertificate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eServiceOnMail", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("eServiceMailId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantPhoto", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantSignature", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idProofType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idProofNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idProofDocument", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownershipProofType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownershipProofDocument", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("selfDeclaration", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("selfDeclarationTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bpNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("orderNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentUploaded", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sapOrderGenerated", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table bsesconn_ConnectionRequest (uuid_ VARCHAR(75) null,connectionRequestId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,requestNo VARCHAR(75) null,mobileNo VARCHAR(75) null,emailId VARCHAR(75) null,requestDate DATE null,requestType VARCHAR(75) null,consumerType VARCHAR(75) null,title VARCHAR(75) null,firstName VARCHAR(75) null,middleName VARCHAR(75) null,lastName VARCHAR(75) null,sonDaughterWife VARCHAR(75) null,fatherOrHusbandName VARCHAR(75) null,firmName VARCHAR(75) null,signatoryName VARCHAR(75) null,signatoryDesignation VARCHAR(75) null,organizationType VARCHAR(75) null,incorporationDate DATE null,gstIn VARCHAR(75) null,panNo VARCHAR(75) null,locality VARCHAR(75) null,district VARCHAR(75) null,houseNo VARCHAR(75) null,floor VARCHAR(75) null,buildingName VARCHAR(75) null,street VARCHAR(75) null,colonyArea VARCHAR(75) null,landmark VARCHAR(75) null,landmarkDetails VARCHAR(75) null,pinCode VARCHAR(75) null,connectionType VARCHAR(75) null,tariffCategory VARCHAR(75) null,loadKva DOUBLE,loadKw DOUBLE,areaType VARCHAR(75) null,premisesType VARCHAR(75) null,upicAvailable BOOLEAN,upic VARCHAR(75) null,wiringTest BOOLEAN,wiringCertificate VARCHAR(75) null,elcbInstalled BOOLEAN,elcbDocument VARCHAR(75) null,stiltParking BOOLEAN,height15Mtr BOOLEAN,height17Mtr BOOLEAN,fcc BOOLEAN,fccCertificate VARCHAR(75) null,lift BOOLEAN,liftCertificate VARCHAR(75) null,agriConsumer BOOLEAN,hasBdoCertificate BOOLEAN,bdoCertificate VARCHAR(75) null,hasDpccCertificate BOOLEAN,dpccCertificate VARCHAR(75) null,hasPollutionCertificate BOOLEAN,pollutionCertificate VARCHAR(75) null,eServiceOnMail BOOLEAN,eServiceMailId VARCHAR(75) null,applicantPhoto VARCHAR(75) null,applicantSignature LONG,idProofType VARCHAR(75) null,idProofNo VARCHAR(75) null,idProofDocument VARCHAR(75) null,ownershipProofType VARCHAR(75) null,ownershipProofDocument VARCHAR(75) null,selfDeclaration BOOLEAN,selfDeclarationTime DATE null,bpNumber VARCHAR(75) null,orderNo VARCHAR(75) null,documentUploaded VARCHAR(75) null,sapOrderGenerated VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table bsesconn_ConnectionRequest";

	public static final String ORDER_BY_JPQL =
		" ORDER BY connectionRequest.requestNo ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY bsesconn_ConnectionRequest.requestNo ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.bses.connection2.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.bses.connection2.model.ConnectionRequest"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.bses.connection2.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.bses.connection2.model.ConnectionRequest"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.bses.connection2.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.bses.connection2.model.ConnectionRequest"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long EMAILID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long MOBILENO_COLUMN_BITMASK = 8L;

	public static final long REQUESTNO_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ConnectionRequest toModel(ConnectionRequestSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ConnectionRequest model = new ConnectionRequestImpl();

		model.setUuid(soapModel.getUuid());
		model.setConnectionRequestId(soapModel.getConnectionRequestId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRequestNo(soapModel.getRequestNo());
		model.setMobileNo(soapModel.getMobileNo());
		model.setEmailId(soapModel.getEmailId());
		model.setRequestDate(soapModel.getRequestDate());
		model.setRequestType(soapModel.getRequestType());
		model.setConsumerType(soapModel.getConsumerType());
		model.setTitle(soapModel.getTitle());
		model.setFirstName(soapModel.getFirstName());
		model.setMiddleName(soapModel.getMiddleName());
		model.setLastName(soapModel.getLastName());
		model.setSonDaughterWife(soapModel.getSonDaughterWife());
		model.setFatherOrHusbandName(soapModel.getFatherOrHusbandName());
		model.setFirmName(soapModel.getFirmName());
		model.setSignatoryName(soapModel.getSignatoryName());
		model.setSignatoryDesignation(soapModel.getSignatoryDesignation());
		model.setOrganizationType(soapModel.getOrganizationType());
		model.setIncorporationDate(soapModel.getIncorporationDate());
		model.setGstIn(soapModel.getGstIn());
		model.setPanNo(soapModel.getPanNo());
		model.setLocality(soapModel.getLocality());
		model.setDistrict(soapModel.getDistrict());
		model.setHouseNo(soapModel.getHouseNo());
		model.setFloor(soapModel.getFloor());
		model.setBuildingName(soapModel.getBuildingName());
		model.setStreet(soapModel.getStreet());
		model.setColonyArea(soapModel.getColonyArea());
		model.setLandmark(soapModel.getLandmark());
		model.setLandmarkDetails(soapModel.getLandmarkDetails());
		model.setPinCode(soapModel.getPinCode());
		model.setConnectionType(soapModel.getConnectionType());
		model.setTariffCategory(soapModel.getTariffCategory());
		model.setLoadKva(soapModel.getLoadKva());
		model.setLoadKw(soapModel.getLoadKw());
		model.setAreaType(soapModel.getAreaType());
		model.setPremisesType(soapModel.getPremisesType());
		model.setUpicAvailable(soapModel.isUpicAvailable());
		model.setUpic(soapModel.getUpic());
		model.setWiringTest(soapModel.isWiringTest());
		model.setWiringCertificate(soapModel.getWiringCertificate());
		model.setElcbInstalled(soapModel.isElcbInstalled());
		model.setElcbDocument(soapModel.getElcbDocument());
		model.setStiltParking(soapModel.isStiltParking());
		model.setHeight15Mtr(soapModel.isHeight15Mtr());
		model.setHeight17Mtr(soapModel.isHeight17Mtr());
		model.setFcc(soapModel.isFcc());
		model.setFccCertificate(soapModel.getFccCertificate());
		model.setLift(soapModel.isLift());
		model.setLiftCertificate(soapModel.getLiftCertificate());
		model.setAgriConsumer(soapModel.isAgriConsumer());
		model.setHasBdoCertificate(soapModel.isHasBdoCertificate());
		model.setBdoCertificate(soapModel.getBdoCertificate());
		model.setHasDpccCertificate(soapModel.isHasDpccCertificate());
		model.setDpccCertificate(soapModel.getDpccCertificate());
		model.setHasPollutionCertificate(soapModel.isHasPollutionCertificate());
		model.setPollutionCertificate(soapModel.getPollutionCertificate());
		model.setEServiceOnMail(soapModel.isEServiceOnMail());
		model.setEServiceMailId(soapModel.getEServiceMailId());
		model.setApplicantPhoto(soapModel.getApplicantPhoto());
		model.setApplicantSignature(soapModel.getApplicantSignature());
		model.setIdProofType(soapModel.getIdProofType());
		model.setIdProofNo(soapModel.getIdProofNo());
		model.setIdProofDocument(soapModel.getIdProofDocument());
		model.setOwnershipProofType(soapModel.getOwnershipProofType());
		model.setOwnershipProofDocument(soapModel.getOwnershipProofDocument());
		model.setSelfDeclaration(soapModel.isSelfDeclaration());
		model.setSelfDeclarationTime(soapModel.getSelfDeclarationTime());
		model.setBpNumber(soapModel.getBpNumber());
		model.setOrderNo(soapModel.getOrderNo());
		model.setDocumentUploaded(soapModel.getDocumentUploaded());
		model.setSapOrderGenerated(soapModel.getSapOrderGenerated());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ConnectionRequest> toModels(
		ConnectionRequestSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ConnectionRequest> models = new ArrayList<ConnectionRequest>(
			soapModels.length);

		for (ConnectionRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.bses.connection2.service.util.ServiceProps.get(
			"lock.expiration.time.com.bses.connection2.model.ConnectionRequest"));

	public ConnectionRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _connectionRequestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConnectionRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _connectionRequestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ConnectionRequest.class;
	}

	@Override
	public String getModelClassName() {
		return ConnectionRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ConnectionRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ConnectionRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ConnectionRequest, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ConnectionRequest)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ConnectionRequest, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ConnectionRequest, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ConnectionRequest)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ConnectionRequest, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ConnectionRequest, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ConnectionRequest>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ConnectionRequest.class.getClassLoader(), ConnectionRequest.class,
			ModelWrapper.class);

		try {
			Constructor<ConnectionRequest> constructor =
				(Constructor<ConnectionRequest>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ConnectionRequest, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ConnectionRequest, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ConnectionRequest, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ConnectionRequest, Object>>();
		Map<String, BiConsumer<ConnectionRequest, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ConnectionRequest, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object uuidObject) {

					connectionRequest.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"connectionRequestId",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getConnectionRequestId();
				}

			});
		attributeSetterBiConsumers.put(
			"connectionRequestId",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object connectionRequestIdObject) {

					connectionRequest.setConnectionRequestId(
						(Long)connectionRequestIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object groupIdObject) {

					connectionRequest.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object companyIdObject) {

					connectionRequest.setCompanyId((Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object userIdObject) {

					connectionRequest.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object userNameObject) {

					connectionRequest.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object createDateObject) {

					connectionRequest.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object modifiedDateObject) {

					connectionRequest.setModifiedDate((Date)modifiedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"requestNo",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getRequestNo();
				}

			});
		attributeSetterBiConsumers.put(
			"requestNo",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object requestNoObject) {

					connectionRequest.setRequestNo((String)requestNoObject);
				}

			});
		attributeGetterFunctions.put(
			"mobileNo",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getMobileNo();
				}

			});
		attributeSetterBiConsumers.put(
			"mobileNo",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object mobileNoObject) {

					connectionRequest.setMobileNo((String)mobileNoObject);
				}

			});
		attributeGetterFunctions.put(
			"emailId",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getEmailId();
				}

			});
		attributeSetterBiConsumers.put(
			"emailId",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object emailIdObject) {

					connectionRequest.setEmailId((String)emailIdObject);
				}

			});
		attributeGetterFunctions.put(
			"requestDate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getRequestDate();
				}

			});
		attributeSetterBiConsumers.put(
			"requestDate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object requestDateObject) {

					connectionRequest.setRequestDate((Date)requestDateObject);
				}

			});
		attributeGetterFunctions.put(
			"requestType",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getRequestType();
				}

			});
		attributeSetterBiConsumers.put(
			"requestType",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object requestTypeObject) {

					connectionRequest.setRequestType((String)requestTypeObject);
				}

			});
		attributeGetterFunctions.put(
			"consumerType",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getConsumerType();
				}

			});
		attributeSetterBiConsumers.put(
			"consumerType",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object consumerTypeObject) {

					connectionRequest.setConsumerType(
						(String)consumerTypeObject);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object titleObject) {

					connectionRequest.setTitle((String)titleObject);
				}

			});
		attributeGetterFunctions.put(
			"firstName",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getFirstName();
				}

			});
		attributeSetterBiConsumers.put(
			"firstName",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object firstNameObject) {

					connectionRequest.setFirstName((String)firstNameObject);
				}

			});
		attributeGetterFunctions.put(
			"middleName",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getMiddleName();
				}

			});
		attributeSetterBiConsumers.put(
			"middleName",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object middleNameObject) {

					connectionRequest.setMiddleName((String)middleNameObject);
				}

			});
		attributeGetterFunctions.put(
			"lastName",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getLastName();
				}

			});
		attributeSetterBiConsumers.put(
			"lastName",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object lastNameObject) {

					connectionRequest.setLastName((String)lastNameObject);
				}

			});
		attributeGetterFunctions.put(
			"sonDaughterWife",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getSonDaughterWife();
				}

			});
		attributeSetterBiConsumers.put(
			"sonDaughterWife",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object sonDaughterWifeObject) {

					connectionRequest.setSonDaughterWife(
						(String)sonDaughterWifeObject);
				}

			});
		attributeGetterFunctions.put(
			"fatherOrHusbandName",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getFatherOrHusbandName();
				}

			});
		attributeSetterBiConsumers.put(
			"fatherOrHusbandName",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object fatherOrHusbandNameObject) {

					connectionRequest.setFatherOrHusbandName(
						(String)fatherOrHusbandNameObject);
				}

			});
		attributeGetterFunctions.put(
			"firmName",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getFirmName();
				}

			});
		attributeSetterBiConsumers.put(
			"firmName",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object firmNameObject) {

					connectionRequest.setFirmName((String)firmNameObject);
				}

			});
		attributeGetterFunctions.put(
			"signatoryName",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getSignatoryName();
				}

			});
		attributeSetterBiConsumers.put(
			"signatoryName",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object signatoryNameObject) {

					connectionRequest.setSignatoryName(
						(String)signatoryNameObject);
				}

			});
		attributeGetterFunctions.put(
			"signatoryDesignation",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getSignatoryDesignation();
				}

			});
		attributeSetterBiConsumers.put(
			"signatoryDesignation",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object signatoryDesignationObject) {

					connectionRequest.setSignatoryDesignation(
						(String)signatoryDesignationObject);
				}

			});
		attributeGetterFunctions.put(
			"organizationType",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getOrganizationType();
				}

			});
		attributeSetterBiConsumers.put(
			"organizationType",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object organizationTypeObject) {

					connectionRequest.setOrganizationType(
						(String)organizationTypeObject);
				}

			});
		attributeGetterFunctions.put(
			"incorporationDate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getIncorporationDate();
				}

			});
		attributeSetterBiConsumers.put(
			"incorporationDate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object incorporationDateObject) {

					connectionRequest.setIncorporationDate(
						(Date)incorporationDateObject);
				}

			});
		attributeGetterFunctions.put(
			"gstIn",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getGstIn();
				}

			});
		attributeSetterBiConsumers.put(
			"gstIn",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object gstInObject) {

					connectionRequest.setGstIn((String)gstInObject);
				}

			});
		attributeGetterFunctions.put(
			"panNo",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getPanNo();
				}

			});
		attributeSetterBiConsumers.put(
			"panNo",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object panNoObject) {

					connectionRequest.setPanNo((String)panNoObject);
				}

			});
		attributeGetterFunctions.put(
			"locality",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getLocality();
				}

			});
		attributeSetterBiConsumers.put(
			"locality",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object localityObject) {

					connectionRequest.setLocality((String)localityObject);
				}

			});
		attributeGetterFunctions.put(
			"district",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getDistrict();
				}

			});
		attributeSetterBiConsumers.put(
			"district",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object districtObject) {

					connectionRequest.setDistrict((String)districtObject);
				}

			});
		attributeGetterFunctions.put(
			"houseNo",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getHouseNo();
				}

			});
		attributeSetterBiConsumers.put(
			"houseNo",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object houseNoObject) {

					connectionRequest.setHouseNo((String)houseNoObject);
				}

			});
		attributeGetterFunctions.put(
			"floor",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getFloor();
				}

			});
		attributeSetterBiConsumers.put(
			"floor",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object floorObject) {

					connectionRequest.setFloor((String)floorObject);
				}

			});
		attributeGetterFunctions.put(
			"buildingName",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getBuildingName();
				}

			});
		attributeSetterBiConsumers.put(
			"buildingName",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object buildingNameObject) {

					connectionRequest.setBuildingName(
						(String)buildingNameObject);
				}

			});
		attributeGetterFunctions.put(
			"street",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getStreet();
				}

			});
		attributeSetterBiConsumers.put(
			"street",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object streetObject) {

					connectionRequest.setStreet((String)streetObject);
				}

			});
		attributeGetterFunctions.put(
			"colonyArea",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getColonyArea();
				}

			});
		attributeSetterBiConsumers.put(
			"colonyArea",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object colonyAreaObject) {

					connectionRequest.setColonyArea((String)colonyAreaObject);
				}

			});
		attributeGetterFunctions.put(
			"landmark",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getLandmark();
				}

			});
		attributeSetterBiConsumers.put(
			"landmark",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object landmarkObject) {

					connectionRequest.setLandmark((String)landmarkObject);
				}

			});
		attributeGetterFunctions.put(
			"landmarkDetails",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getLandmarkDetails();
				}

			});
		attributeSetterBiConsumers.put(
			"landmarkDetails",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object landmarkDetailsObject) {

					connectionRequest.setLandmarkDetails(
						(String)landmarkDetailsObject);
				}

			});
		attributeGetterFunctions.put(
			"pinCode",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getPinCode();
				}

			});
		attributeSetterBiConsumers.put(
			"pinCode",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object pinCodeObject) {

					connectionRequest.setPinCode((String)pinCodeObject);
				}

			});
		attributeGetterFunctions.put(
			"connectionType",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getConnectionType();
				}

			});
		attributeSetterBiConsumers.put(
			"connectionType",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object connectionTypeObject) {

					connectionRequest.setConnectionType(
						(String)connectionTypeObject);
				}

			});
		attributeGetterFunctions.put(
			"tariffCategory",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getTariffCategory();
				}

			});
		attributeSetterBiConsumers.put(
			"tariffCategory",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object tariffCategoryObject) {

					connectionRequest.setTariffCategory(
						(String)tariffCategoryObject);
				}

			});
		attributeGetterFunctions.put(
			"loadKva",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getLoadKva();
				}

			});
		attributeSetterBiConsumers.put(
			"loadKva",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object loadKvaObject) {

					connectionRequest.setLoadKva((Float)loadKvaObject);
				}

			});
		attributeGetterFunctions.put(
			"loadKw",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getLoadKw();
				}

			});
		attributeSetterBiConsumers.put(
			"loadKw",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object loadKwObject) {

					connectionRequest.setLoadKw((Float)loadKwObject);
				}

			});
		attributeGetterFunctions.put(
			"areaType",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getAreaType();
				}

			});
		attributeSetterBiConsumers.put(
			"areaType",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object areaTypeObject) {

					connectionRequest.setAreaType((String)areaTypeObject);
				}

			});
		attributeGetterFunctions.put(
			"premisesType",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getPremisesType();
				}

			});
		attributeSetterBiConsumers.put(
			"premisesType",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object premisesTypeObject) {

					connectionRequest.setPremisesType(
						(String)premisesTypeObject);
				}

			});
		attributeGetterFunctions.put(
			"upicAvailable",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getUpicAvailable();
				}

			});
		attributeSetterBiConsumers.put(
			"upicAvailable",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object upicAvailableObject) {

					connectionRequest.setUpicAvailable(
						(Boolean)upicAvailableObject);
				}

			});
		attributeGetterFunctions.put(
			"upic",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getUpic();
				}

			});
		attributeSetterBiConsumers.put(
			"upic",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object upicObject) {

					connectionRequest.setUpic((String)upicObject);
				}

			});
		attributeGetterFunctions.put(
			"wiringTest",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getWiringTest();
				}

			});
		attributeSetterBiConsumers.put(
			"wiringTest",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object wiringTestObject) {

					connectionRequest.setWiringTest((Boolean)wiringTestObject);
				}

			});
		attributeGetterFunctions.put(
			"wiringCertificate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getWiringCertificate();
				}

			});
		attributeSetterBiConsumers.put(
			"wiringCertificate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object wiringCertificateObject) {

					connectionRequest.setWiringCertificate(
						(String)wiringCertificateObject);
				}

			});
		attributeGetterFunctions.put(
			"elcbInstalled",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getElcbInstalled();
				}

			});
		attributeSetterBiConsumers.put(
			"elcbInstalled",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object elcbInstalledObject) {

					connectionRequest.setElcbInstalled(
						(Boolean)elcbInstalledObject);
				}

			});
		attributeGetterFunctions.put(
			"elcbDocument",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getElcbDocument();
				}

			});
		attributeSetterBiConsumers.put(
			"elcbDocument",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object elcbDocumentObject) {

					connectionRequest.setElcbDocument(
						(String)elcbDocumentObject);
				}

			});
		attributeGetterFunctions.put(
			"stiltParking",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getStiltParking();
				}

			});
		attributeSetterBiConsumers.put(
			"stiltParking",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object stiltParkingObject) {

					connectionRequest.setStiltParking(
						(Boolean)stiltParkingObject);
				}

			});
		attributeGetterFunctions.put(
			"height15Mtr",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getHeight15Mtr();
				}

			});
		attributeSetterBiConsumers.put(
			"height15Mtr",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object height15MtrObject) {

					connectionRequest.setHeight15Mtr(
						(Boolean)height15MtrObject);
				}

			});
		attributeGetterFunctions.put(
			"height17Mtr",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getHeight17Mtr();
				}

			});
		attributeSetterBiConsumers.put(
			"height17Mtr",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object height17MtrObject) {

					connectionRequest.setHeight17Mtr(
						(Boolean)height17MtrObject);
				}

			});
		attributeGetterFunctions.put(
			"fcc",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getFcc();
				}

			});
		attributeSetterBiConsumers.put(
			"fcc",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object fccObject) {

					connectionRequest.setFcc((Boolean)fccObject);
				}

			});
		attributeGetterFunctions.put(
			"fccCertificate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getFccCertificate();
				}

			});
		attributeSetterBiConsumers.put(
			"fccCertificate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object fccCertificateObject) {

					connectionRequest.setFccCertificate(
						(String)fccCertificateObject);
				}

			});
		attributeGetterFunctions.put(
			"lift",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getLift();
				}

			});
		attributeSetterBiConsumers.put(
			"lift",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object liftObject) {

					connectionRequest.setLift((Boolean)liftObject);
				}

			});
		attributeGetterFunctions.put(
			"liftCertificate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getLiftCertificate();
				}

			});
		attributeSetterBiConsumers.put(
			"liftCertificate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object liftCertificateObject) {

					connectionRequest.setLiftCertificate(
						(String)liftCertificateObject);
				}

			});
		attributeGetterFunctions.put(
			"agriConsumer",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getAgriConsumer();
				}

			});
		attributeSetterBiConsumers.put(
			"agriConsumer",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object agriConsumerObject) {

					connectionRequest.setAgriConsumer(
						(Boolean)agriConsumerObject);
				}

			});
		attributeGetterFunctions.put(
			"hasBdoCertificate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getHasBdoCertificate();
				}

			});
		attributeSetterBiConsumers.put(
			"hasBdoCertificate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object hasBdoCertificateObject) {

					connectionRequest.setHasBdoCertificate(
						(Boolean)hasBdoCertificateObject);
				}

			});
		attributeGetterFunctions.put(
			"bdoCertificate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getBdoCertificate();
				}

			});
		attributeSetterBiConsumers.put(
			"bdoCertificate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object bdoCertificateObject) {

					connectionRequest.setBdoCertificate(
						(String)bdoCertificateObject);
				}

			});
		attributeGetterFunctions.put(
			"hasDpccCertificate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getHasDpccCertificate();
				}

			});
		attributeSetterBiConsumers.put(
			"hasDpccCertificate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object hasDpccCertificateObject) {

					connectionRequest.setHasDpccCertificate(
						(Boolean)hasDpccCertificateObject);
				}

			});
		attributeGetterFunctions.put(
			"dpccCertificate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getDpccCertificate();
				}

			});
		attributeSetterBiConsumers.put(
			"dpccCertificate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object dpccCertificateObject) {

					connectionRequest.setDpccCertificate(
						(String)dpccCertificateObject);
				}

			});
		attributeGetterFunctions.put(
			"hasPollutionCertificate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getHasPollutionCertificate();
				}

			});
		attributeSetterBiConsumers.put(
			"hasPollutionCertificate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object hasPollutionCertificateObject) {

					connectionRequest.setHasPollutionCertificate(
						(Boolean)hasPollutionCertificateObject);
				}

			});
		attributeGetterFunctions.put(
			"pollutionCertificate",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getPollutionCertificate();
				}

			});
		attributeSetterBiConsumers.put(
			"pollutionCertificate",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object pollutionCertificateObject) {

					connectionRequest.setPollutionCertificate(
						(String)pollutionCertificateObject);
				}

			});
		attributeGetterFunctions.put(
			"eServiceOnMail",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getEServiceOnMail();
				}

			});
		attributeSetterBiConsumers.put(
			"eServiceOnMail",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object eServiceOnMailObject) {

					connectionRequest.setEServiceOnMail(
						(Boolean)eServiceOnMailObject);
				}

			});
		attributeGetterFunctions.put(
			"eServiceMailId",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getEServiceMailId();
				}

			});
		attributeSetterBiConsumers.put(
			"eServiceMailId",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object eServiceMailIdObject) {

					connectionRequest.setEServiceMailId(
						(String)eServiceMailIdObject);
				}

			});
		attributeGetterFunctions.put(
			"applicantPhoto",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getApplicantPhoto();
				}

			});
		attributeSetterBiConsumers.put(
			"applicantPhoto",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object applicantPhotoObject) {

					connectionRequest.setApplicantPhoto(
						(String)applicantPhotoObject);
				}

			});
		attributeGetterFunctions.put(
			"applicantSignature",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getApplicantSignature();
				}

			});
		attributeSetterBiConsumers.put(
			"applicantSignature",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object applicantSignatureObject) {

					connectionRequest.setApplicantSignature(
						(Long)applicantSignatureObject);
				}

			});
		attributeGetterFunctions.put(
			"idProofType",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getIdProofType();
				}

			});
		attributeSetterBiConsumers.put(
			"idProofType",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object idProofTypeObject) {

					connectionRequest.setIdProofType((String)idProofTypeObject);
				}

			});
		attributeGetterFunctions.put(
			"idProofNo",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getIdProofNo();
				}

			});
		attributeSetterBiConsumers.put(
			"idProofNo",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object idProofNoObject) {

					connectionRequest.setIdProofNo((String)idProofNoObject);
				}

			});
		attributeGetterFunctions.put(
			"idProofDocument",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getIdProofDocument();
				}

			});
		attributeSetterBiConsumers.put(
			"idProofDocument",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object idProofDocumentObject) {

					connectionRequest.setIdProofDocument(
						(String)idProofDocumentObject);
				}

			});
		attributeGetterFunctions.put(
			"ownershipProofType",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getOwnershipProofType();
				}

			});
		attributeSetterBiConsumers.put(
			"ownershipProofType",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object ownershipProofTypeObject) {

					connectionRequest.setOwnershipProofType(
						(String)ownershipProofTypeObject);
				}

			});
		attributeGetterFunctions.put(
			"ownershipProofDocument",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getOwnershipProofDocument();
				}

			});
		attributeSetterBiConsumers.put(
			"ownershipProofDocument",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object ownershipProofDocumentObject) {

					connectionRequest.setOwnershipProofDocument(
						(String)ownershipProofDocumentObject);
				}

			});
		attributeGetterFunctions.put(
			"selfDeclaration",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getSelfDeclaration();
				}

			});
		attributeSetterBiConsumers.put(
			"selfDeclaration",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object selfDeclarationObject) {

					connectionRequest.setSelfDeclaration(
						(Boolean)selfDeclarationObject);
				}

			});
		attributeGetterFunctions.put(
			"selfDeclarationTime",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getSelfDeclarationTime();
				}

			});
		attributeSetterBiConsumers.put(
			"selfDeclarationTime",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object selfDeclarationTimeObject) {

					connectionRequest.setSelfDeclarationTime(
						(Date)selfDeclarationTimeObject);
				}

			});
		attributeGetterFunctions.put(
			"bpNumber",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getBpNumber();
				}

			});
		attributeSetterBiConsumers.put(
			"bpNumber",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object bpNumberObject) {

					connectionRequest.setBpNumber((String)bpNumberObject);
				}

			});
		attributeGetterFunctions.put(
			"orderNo",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getOrderNo();
				}

			});
		attributeSetterBiConsumers.put(
			"orderNo",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest, Object orderNoObject) {

					connectionRequest.setOrderNo((String)orderNoObject);
				}

			});
		attributeGetterFunctions.put(
			"documentUploaded",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getDocumentUploaded();
				}

			});
		attributeSetterBiConsumers.put(
			"documentUploaded",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object documentUploadedObject) {

					connectionRequest.setDocumentUploaded(
						(String)documentUploadedObject);
				}

			});
		attributeGetterFunctions.put(
			"sapOrderGenerated",
			new Function<ConnectionRequest, Object>() {

				@Override
				public Object apply(ConnectionRequest connectionRequest) {
					return connectionRequest.getSapOrderGenerated();
				}

			});
		attributeSetterBiConsumers.put(
			"sapOrderGenerated",
			new BiConsumer<ConnectionRequest, Object>() {

				@Override
				public void accept(
					ConnectionRequest connectionRequest,
					Object sapOrderGeneratedObject) {

					connectionRequest.setSapOrderGenerated(
						(String)sapOrderGeneratedObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getConnectionRequestId() {
		return _connectionRequestId;
	}

	@Override
	public void setConnectionRequestId(long connectionRequestId) {
		_connectionRequestId = connectionRequestId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRequestNo() {
		if (_requestNo == null) {
			return "";
		}
		else {
			return _requestNo;
		}
	}

	@Override
	public void setRequestNo(String requestNo) {
		_columnBitmask = -1L;

		if (_originalRequestNo == null) {
			_originalRequestNo = _requestNo;
		}

		_requestNo = requestNo;
	}

	public String getOriginalRequestNo() {
		return GetterUtil.getString(_originalRequestNo);
	}

	@JSON
	@Override
	public String getMobileNo() {
		if (_mobileNo == null) {
			return "";
		}
		else {
			return _mobileNo;
		}
	}

	@Override
	public void setMobileNo(String mobileNo) {
		_columnBitmask |= MOBILENO_COLUMN_BITMASK;

		if (_originalMobileNo == null) {
			_originalMobileNo = _mobileNo;
		}

		_mobileNo = mobileNo;
	}

	public String getOriginalMobileNo() {
		return GetterUtil.getString(_originalMobileNo);
	}

	@JSON
	@Override
	public String getEmailId() {
		if (_emailId == null) {
			return "";
		}
		else {
			return _emailId;
		}
	}

	@Override
	public void setEmailId(String emailId) {
		_columnBitmask |= EMAILID_COLUMN_BITMASK;

		if (_originalEmailId == null) {
			_originalEmailId = _emailId;
		}

		_emailId = emailId;
	}

	public String getOriginalEmailId() {
		return GetterUtil.getString(_originalEmailId);
	}

	@JSON
	@Override
	public Date getRequestDate() {
		return _requestDate;
	}

	@Override
	public void setRequestDate(Date requestDate) {
		_requestDate = requestDate;
	}

	@JSON
	@Override
	public String getRequestType() {
		if (_requestType == null) {
			return "";
		}
		else {
			return _requestType;
		}
	}

	@Override
	public void setRequestType(String requestType) {
		_requestType = requestType;
	}

	@JSON
	@Override
	public String getConsumerType() {
		if (_consumerType == null) {
			return "";
		}
		else {
			return _consumerType;
		}
	}

	@Override
	public void setConsumerType(String consumerType) {
		_consumerType = consumerType;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getMiddleName() {
		if (_middleName == null) {
			return "";
		}
		else {
			return _middleName;
		}
	}

	@Override
	public void setMiddleName(String middleName) {
		_middleName = middleName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@JSON
	@Override
	public String getSonDaughterWife() {
		if (_sonDaughterWife == null) {
			return "";
		}
		else {
			return _sonDaughterWife;
		}
	}

	@Override
	public void setSonDaughterWife(String sonDaughterWife) {
		_sonDaughterWife = sonDaughterWife;
	}

	@JSON
	@Override
	public String getFatherOrHusbandName() {
		if (_fatherOrHusbandName == null) {
			return "";
		}
		else {
			return _fatherOrHusbandName;
		}
	}

	@Override
	public void setFatherOrHusbandName(String fatherOrHusbandName) {
		_fatherOrHusbandName = fatherOrHusbandName;
	}

	@JSON
	@Override
	public String getFirmName() {
		if (_firmName == null) {
			return "";
		}
		else {
			return _firmName;
		}
	}

	@Override
	public void setFirmName(String firmName) {
		_firmName = firmName;
	}

	@JSON
	@Override
	public String getSignatoryName() {
		if (_signatoryName == null) {
			return "";
		}
		else {
			return _signatoryName;
		}
	}

	@Override
	public void setSignatoryName(String signatoryName) {
		_signatoryName = signatoryName;
	}

	@JSON
	@Override
	public String getSignatoryDesignation() {
		if (_signatoryDesignation == null) {
			return "";
		}
		else {
			return _signatoryDesignation;
		}
	}

	@Override
	public void setSignatoryDesignation(String signatoryDesignation) {
		_signatoryDesignation = signatoryDesignation;
	}

	@JSON
	@Override
	public String getOrganizationType() {
		if (_organizationType == null) {
			return "";
		}
		else {
			return _organizationType;
		}
	}

	@Override
	public void setOrganizationType(String organizationType) {
		_organizationType = organizationType;
	}

	@JSON
	@Override
	public Date getIncorporationDate() {
		return _incorporationDate;
	}

	@Override
	public void setIncorporationDate(Date incorporationDate) {
		_incorporationDate = incorporationDate;
	}

	@JSON
	@Override
	public String getGstIn() {
		if (_gstIn == null) {
			return "";
		}
		else {
			return _gstIn;
		}
	}

	@Override
	public void setGstIn(String gstIn) {
		_gstIn = gstIn;
	}

	@JSON
	@Override
	public String getPanNo() {
		if (_panNo == null) {
			return "";
		}
		else {
			return _panNo;
		}
	}

	@Override
	public void setPanNo(String panNo) {
		_panNo = panNo;
	}

	@JSON
	@Override
	public String getLocality() {
		if (_locality == null) {
			return "";
		}
		else {
			return _locality;
		}
	}

	@Override
	public void setLocality(String locality) {
		_locality = locality;
	}

	@JSON
	@Override
	public String getDistrict() {
		if (_district == null) {
			return "";
		}
		else {
			return _district;
		}
	}

	@Override
	public void setDistrict(String district) {
		_district = district;
	}

	@JSON
	@Override
	public String getHouseNo() {
		if (_houseNo == null) {
			return "";
		}
		else {
			return _houseNo;
		}
	}

	@Override
	public void setHouseNo(String houseNo) {
		_houseNo = houseNo;
	}

	@JSON
	@Override
	public String getFloor() {
		if (_floor == null) {
			return "";
		}
		else {
			return _floor;
		}
	}

	@Override
	public void setFloor(String floor) {
		_floor = floor;
	}

	@JSON
	@Override
	public String getBuildingName() {
		if (_buildingName == null) {
			return "";
		}
		else {
			return _buildingName;
		}
	}

	@Override
	public void setBuildingName(String buildingName) {
		_buildingName = buildingName;
	}

	@JSON
	@Override
	public String getStreet() {
		if (_street == null) {
			return "";
		}
		else {
			return _street;
		}
	}

	@Override
	public void setStreet(String street) {
		_street = street;
	}

	@JSON
	@Override
	public String getColonyArea() {
		if (_colonyArea == null) {
			return "";
		}
		else {
			return _colonyArea;
		}
	}

	@Override
	public void setColonyArea(String colonyArea) {
		_colonyArea = colonyArea;
	}

	@JSON
	@Override
	public String getLandmark() {
		if (_landmark == null) {
			return "";
		}
		else {
			return _landmark;
		}
	}

	@Override
	public void setLandmark(String landmark) {
		_landmark = landmark;
	}

	@JSON
	@Override
	public String getLandmarkDetails() {
		if (_landmarkDetails == null) {
			return "";
		}
		else {
			return _landmarkDetails;
		}
	}

	@Override
	public void setLandmarkDetails(String landmarkDetails) {
		_landmarkDetails = landmarkDetails;
	}

	@JSON
	@Override
	public String getPinCode() {
		if (_pinCode == null) {
			return "";
		}
		else {
			return _pinCode;
		}
	}

	@Override
	public void setPinCode(String pinCode) {
		_pinCode = pinCode;
	}

	@JSON
	@Override
	public String getConnectionType() {
		if (_connectionType == null) {
			return "";
		}
		else {
			return _connectionType;
		}
	}

	@Override
	public void setConnectionType(String connectionType) {
		_connectionType = connectionType;
	}

	@JSON
	@Override
	public String getTariffCategory() {
		if (_tariffCategory == null) {
			return "";
		}
		else {
			return _tariffCategory;
		}
	}

	@Override
	public void setTariffCategory(String tariffCategory) {
		_tariffCategory = tariffCategory;
	}

	@JSON
	@Override
	public float getLoadKva() {
		return _loadKva;
	}

	@Override
	public void setLoadKva(float loadKva) {
		_loadKva = loadKva;
	}

	@JSON
	@Override
	public float getLoadKw() {
		return _loadKw;
	}

	@Override
	public void setLoadKw(float loadKw) {
		_loadKw = loadKw;
	}

	@JSON
	@Override
	public String getAreaType() {
		if (_areaType == null) {
			return "";
		}
		else {
			return _areaType;
		}
	}

	@Override
	public void setAreaType(String areaType) {
		_areaType = areaType;
	}

	@JSON
	@Override
	public String getPremisesType() {
		if (_premisesType == null) {
			return "";
		}
		else {
			return _premisesType;
		}
	}

	@Override
	public void setPremisesType(String premisesType) {
		_premisesType = premisesType;
	}

	@JSON
	@Override
	public boolean getUpicAvailable() {
		return _upicAvailable;
	}

	@JSON
	@Override
	public boolean isUpicAvailable() {
		return _upicAvailable;
	}

	@Override
	public void setUpicAvailable(boolean upicAvailable) {
		_upicAvailable = upicAvailable;
	}

	@JSON
	@Override
	public String getUpic() {
		if (_upic == null) {
			return "";
		}
		else {
			return _upic;
		}
	}

	@Override
	public void setUpic(String upic) {
		_upic = upic;
	}

	@JSON
	@Override
	public boolean getWiringTest() {
		return _wiringTest;
	}

	@JSON
	@Override
	public boolean isWiringTest() {
		return _wiringTest;
	}

	@Override
	public void setWiringTest(boolean wiringTest) {
		_wiringTest = wiringTest;
	}

	@JSON
	@Override
	public String getWiringCertificate() {
		if (_wiringCertificate == null) {
			return "";
		}
		else {
			return _wiringCertificate;
		}
	}

	@Override
	public void setWiringCertificate(String wiringCertificate) {
		_wiringCertificate = wiringCertificate;
	}

	@JSON
	@Override
	public boolean getElcbInstalled() {
		return _elcbInstalled;
	}

	@JSON
	@Override
	public boolean isElcbInstalled() {
		return _elcbInstalled;
	}

	@Override
	public void setElcbInstalled(boolean elcbInstalled) {
		_elcbInstalled = elcbInstalled;
	}

	@JSON
	@Override
	public String getElcbDocument() {
		if (_elcbDocument == null) {
			return "";
		}
		else {
			return _elcbDocument;
		}
	}

	@Override
	public void setElcbDocument(String elcbDocument) {
		_elcbDocument = elcbDocument;
	}

	@JSON
	@Override
	public boolean getStiltParking() {
		return _stiltParking;
	}

	@JSON
	@Override
	public boolean isStiltParking() {
		return _stiltParking;
	}

	@Override
	public void setStiltParking(boolean stiltParking) {
		_stiltParking = stiltParking;
	}

	@JSON
	@Override
	public boolean getHeight15Mtr() {
		return _height15Mtr;
	}

	@JSON
	@Override
	public boolean isHeight15Mtr() {
		return _height15Mtr;
	}

	@Override
	public void setHeight15Mtr(boolean height15Mtr) {
		_height15Mtr = height15Mtr;
	}

	@JSON
	@Override
	public boolean getHeight17Mtr() {
		return _height17Mtr;
	}

	@JSON
	@Override
	public boolean isHeight17Mtr() {
		return _height17Mtr;
	}

	@Override
	public void setHeight17Mtr(boolean height17Mtr) {
		_height17Mtr = height17Mtr;
	}

	@JSON
	@Override
	public boolean getFcc() {
		return _fcc;
	}

	@JSON
	@Override
	public boolean isFcc() {
		return _fcc;
	}

	@Override
	public void setFcc(boolean fcc) {
		_fcc = fcc;
	}

	@JSON
	@Override
	public String getFccCertificate() {
		if (_fccCertificate == null) {
			return "";
		}
		else {
			return _fccCertificate;
		}
	}

	@Override
	public void setFccCertificate(String fccCertificate) {
		_fccCertificate = fccCertificate;
	}

	@JSON
	@Override
	public boolean getLift() {
		return _lift;
	}

	@JSON
	@Override
	public boolean isLift() {
		return _lift;
	}

	@Override
	public void setLift(boolean lift) {
		_lift = lift;
	}

	@JSON
	@Override
	public String getLiftCertificate() {
		if (_liftCertificate == null) {
			return "";
		}
		else {
			return _liftCertificate;
		}
	}

	@Override
	public void setLiftCertificate(String liftCertificate) {
		_liftCertificate = liftCertificate;
	}

	@JSON
	@Override
	public boolean getAgriConsumer() {
		return _agriConsumer;
	}

	@JSON
	@Override
	public boolean isAgriConsumer() {
		return _agriConsumer;
	}

	@Override
	public void setAgriConsumer(boolean agriConsumer) {
		_agriConsumer = agriConsumer;
	}

	@JSON
	@Override
	public boolean getHasBdoCertificate() {
		return _hasBdoCertificate;
	}

	@JSON
	@Override
	public boolean isHasBdoCertificate() {
		return _hasBdoCertificate;
	}

	@Override
	public void setHasBdoCertificate(boolean hasBdoCertificate) {
		_hasBdoCertificate = hasBdoCertificate;
	}

	@JSON
	@Override
	public String getBdoCertificate() {
		if (_bdoCertificate == null) {
			return "";
		}
		else {
			return _bdoCertificate;
		}
	}

	@Override
	public void setBdoCertificate(String bdoCertificate) {
		_bdoCertificate = bdoCertificate;
	}

	@JSON
	@Override
	public boolean getHasDpccCertificate() {
		return _hasDpccCertificate;
	}

	@JSON
	@Override
	public boolean isHasDpccCertificate() {
		return _hasDpccCertificate;
	}

	@Override
	public void setHasDpccCertificate(boolean hasDpccCertificate) {
		_hasDpccCertificate = hasDpccCertificate;
	}

	@JSON
	@Override
	public String getDpccCertificate() {
		if (_dpccCertificate == null) {
			return "";
		}
		else {
			return _dpccCertificate;
		}
	}

	@Override
	public void setDpccCertificate(String dpccCertificate) {
		_dpccCertificate = dpccCertificate;
	}

	@JSON
	@Override
	public boolean getHasPollutionCertificate() {
		return _hasPollutionCertificate;
	}

	@JSON
	@Override
	public boolean isHasPollutionCertificate() {
		return _hasPollutionCertificate;
	}

	@Override
	public void setHasPollutionCertificate(boolean hasPollutionCertificate) {
		_hasPollutionCertificate = hasPollutionCertificate;
	}

	@JSON
	@Override
	public String getPollutionCertificate() {
		if (_pollutionCertificate == null) {
			return "";
		}
		else {
			return _pollutionCertificate;
		}
	}

	@Override
	public void setPollutionCertificate(String pollutionCertificate) {
		_pollutionCertificate = pollutionCertificate;
	}

	@JSON
	@Override
	public boolean getEServiceOnMail() {
		return _eServiceOnMail;
	}

	@JSON
	@Override
	public boolean isEServiceOnMail() {
		return _eServiceOnMail;
	}

	@Override
	public void setEServiceOnMail(boolean eServiceOnMail) {
		_eServiceOnMail = eServiceOnMail;
	}

	@JSON
	@Override
	public String getEServiceMailId() {
		if (_eServiceMailId == null) {
			return "";
		}
		else {
			return _eServiceMailId;
		}
	}

	@Override
	public void setEServiceMailId(String eServiceMailId) {
		_eServiceMailId = eServiceMailId;
	}

	@JSON
	@Override
	public String getApplicantPhoto() {
		if (_applicantPhoto == null) {
			return "";
		}
		else {
			return _applicantPhoto;
		}
	}

	@Override
	public void setApplicantPhoto(String applicantPhoto) {
		_applicantPhoto = applicantPhoto;
	}

	@JSON
	@Override
	public long getApplicantSignature() {
		return _applicantSignature;
	}

	@Override
	public void setApplicantSignature(long applicantSignature) {
		_applicantSignature = applicantSignature;
	}

	@JSON
	@Override
	public String getIdProofType() {
		if (_idProofType == null) {
			return "";
		}
		else {
			return _idProofType;
		}
	}

	@Override
	public void setIdProofType(String idProofType) {
		_idProofType = idProofType;
	}

	@JSON
	@Override
	public String getIdProofNo() {
		if (_idProofNo == null) {
			return "";
		}
		else {
			return _idProofNo;
		}
	}

	@Override
	public void setIdProofNo(String idProofNo) {
		_idProofNo = idProofNo;
	}

	@JSON
	@Override
	public String getIdProofDocument() {
		if (_idProofDocument == null) {
			return "";
		}
		else {
			return _idProofDocument;
		}
	}

	@Override
	public void setIdProofDocument(String idProofDocument) {
		_idProofDocument = idProofDocument;
	}

	@JSON
	@Override
	public String getOwnershipProofType() {
		if (_ownershipProofType == null) {
			return "";
		}
		else {
			return _ownershipProofType;
		}
	}

	@Override
	public void setOwnershipProofType(String ownershipProofType) {
		_ownershipProofType = ownershipProofType;
	}

	@JSON
	@Override
	public String getOwnershipProofDocument() {
		if (_ownershipProofDocument == null) {
			return "";
		}
		else {
			return _ownershipProofDocument;
		}
	}

	@Override
	public void setOwnershipProofDocument(String ownershipProofDocument) {
		_ownershipProofDocument = ownershipProofDocument;
	}

	@JSON
	@Override
	public boolean getSelfDeclaration() {
		return _selfDeclaration;
	}

	@JSON
	@Override
	public boolean isSelfDeclaration() {
		return _selfDeclaration;
	}

	@Override
	public void setSelfDeclaration(boolean selfDeclaration) {
		_selfDeclaration = selfDeclaration;
	}

	@JSON
	@Override
	public Date getSelfDeclarationTime() {
		return _selfDeclarationTime;
	}

	@Override
	public void setSelfDeclarationTime(Date selfDeclarationTime) {
		_selfDeclarationTime = selfDeclarationTime;
	}

	@JSON
	@Override
	public String getBpNumber() {
		if (_bpNumber == null) {
			return "";
		}
		else {
			return _bpNumber;
		}
	}

	@Override
	public void setBpNumber(String bpNumber) {
		_bpNumber = bpNumber;
	}

	@JSON
	@Override
	public String getOrderNo() {
		if (_orderNo == null) {
			return "";
		}
		else {
			return _orderNo;
		}
	}

	@Override
	public void setOrderNo(String orderNo) {
		_orderNo = orderNo;
	}

	@JSON
	@Override
	public String getDocumentUploaded() {
		if (_documentUploaded == null) {
			return "";
		}
		else {
			return _documentUploaded;
		}
	}

	@Override
	public void setDocumentUploaded(String documentUploaded) {
		_documentUploaded = documentUploaded;
	}

	@JSON
	@Override
	public String getSapOrderGenerated() {
		if (_sapOrderGenerated == null) {
			return "";
		}
		else {
			return _sapOrderGenerated;
		}
	}

	@Override
	public void setSapOrderGenerated(String sapOrderGenerated) {
		_sapOrderGenerated = sapOrderGenerated;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ConnectionRequest.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ConnectionRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ConnectionRequest toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ConnectionRequest>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConnectionRequestImpl connectionRequestImpl =
			new ConnectionRequestImpl();

		connectionRequestImpl.setUuid(getUuid());
		connectionRequestImpl.setConnectionRequestId(getConnectionRequestId());
		connectionRequestImpl.setGroupId(getGroupId());
		connectionRequestImpl.setCompanyId(getCompanyId());
		connectionRequestImpl.setUserId(getUserId());
		connectionRequestImpl.setUserName(getUserName());
		connectionRequestImpl.setCreateDate(getCreateDate());
		connectionRequestImpl.setModifiedDate(getModifiedDate());
		connectionRequestImpl.setRequestNo(getRequestNo());
		connectionRequestImpl.setMobileNo(getMobileNo());
		connectionRequestImpl.setEmailId(getEmailId());
		connectionRequestImpl.setRequestDate(getRequestDate());
		connectionRequestImpl.setRequestType(getRequestType());
		connectionRequestImpl.setConsumerType(getConsumerType());
		connectionRequestImpl.setTitle(getTitle());
		connectionRequestImpl.setFirstName(getFirstName());
		connectionRequestImpl.setMiddleName(getMiddleName());
		connectionRequestImpl.setLastName(getLastName());
		connectionRequestImpl.setSonDaughterWife(getSonDaughterWife());
		connectionRequestImpl.setFatherOrHusbandName(getFatherOrHusbandName());
		connectionRequestImpl.setFirmName(getFirmName());
		connectionRequestImpl.setSignatoryName(getSignatoryName());
		connectionRequestImpl.setSignatoryDesignation(
			getSignatoryDesignation());
		connectionRequestImpl.setOrganizationType(getOrganizationType());
		connectionRequestImpl.setIncorporationDate(getIncorporationDate());
		connectionRequestImpl.setGstIn(getGstIn());
		connectionRequestImpl.setPanNo(getPanNo());
		connectionRequestImpl.setLocality(getLocality());
		connectionRequestImpl.setDistrict(getDistrict());
		connectionRequestImpl.setHouseNo(getHouseNo());
		connectionRequestImpl.setFloor(getFloor());
		connectionRequestImpl.setBuildingName(getBuildingName());
		connectionRequestImpl.setStreet(getStreet());
		connectionRequestImpl.setColonyArea(getColonyArea());
		connectionRequestImpl.setLandmark(getLandmark());
		connectionRequestImpl.setLandmarkDetails(getLandmarkDetails());
		connectionRequestImpl.setPinCode(getPinCode());
		connectionRequestImpl.setConnectionType(getConnectionType());
		connectionRequestImpl.setTariffCategory(getTariffCategory());
		connectionRequestImpl.setLoadKva(getLoadKva());
		connectionRequestImpl.setLoadKw(getLoadKw());
		connectionRequestImpl.setAreaType(getAreaType());
		connectionRequestImpl.setPremisesType(getPremisesType());
		connectionRequestImpl.setUpicAvailable(isUpicAvailable());
		connectionRequestImpl.setUpic(getUpic());
		connectionRequestImpl.setWiringTest(isWiringTest());
		connectionRequestImpl.setWiringCertificate(getWiringCertificate());
		connectionRequestImpl.setElcbInstalled(isElcbInstalled());
		connectionRequestImpl.setElcbDocument(getElcbDocument());
		connectionRequestImpl.setStiltParking(isStiltParking());
		connectionRequestImpl.setHeight15Mtr(isHeight15Mtr());
		connectionRequestImpl.setHeight17Mtr(isHeight17Mtr());
		connectionRequestImpl.setFcc(isFcc());
		connectionRequestImpl.setFccCertificate(getFccCertificate());
		connectionRequestImpl.setLift(isLift());
		connectionRequestImpl.setLiftCertificate(getLiftCertificate());
		connectionRequestImpl.setAgriConsumer(isAgriConsumer());
		connectionRequestImpl.setHasBdoCertificate(isHasBdoCertificate());
		connectionRequestImpl.setBdoCertificate(getBdoCertificate());
		connectionRequestImpl.setHasDpccCertificate(isHasDpccCertificate());
		connectionRequestImpl.setDpccCertificate(getDpccCertificate());
		connectionRequestImpl.setHasPollutionCertificate(
			isHasPollutionCertificate());
		connectionRequestImpl.setPollutionCertificate(
			getPollutionCertificate());
		connectionRequestImpl.setEServiceOnMail(isEServiceOnMail());
		connectionRequestImpl.setEServiceMailId(getEServiceMailId());
		connectionRequestImpl.setApplicantPhoto(getApplicantPhoto());
		connectionRequestImpl.setApplicantSignature(getApplicantSignature());
		connectionRequestImpl.setIdProofType(getIdProofType());
		connectionRequestImpl.setIdProofNo(getIdProofNo());
		connectionRequestImpl.setIdProofDocument(getIdProofDocument());
		connectionRequestImpl.setOwnershipProofType(getOwnershipProofType());
		connectionRequestImpl.setOwnershipProofDocument(
			getOwnershipProofDocument());
		connectionRequestImpl.setSelfDeclaration(isSelfDeclaration());
		connectionRequestImpl.setSelfDeclarationTime(getSelfDeclarationTime());
		connectionRequestImpl.setBpNumber(getBpNumber());
		connectionRequestImpl.setOrderNo(getOrderNo());
		connectionRequestImpl.setDocumentUploaded(getDocumentUploaded());
		connectionRequestImpl.setSapOrderGenerated(getSapOrderGenerated());

		connectionRequestImpl.resetOriginalValues();

		return connectionRequestImpl;
	}

	@Override
	public int compareTo(ConnectionRequest connectionRequest) {
		int value = 0;

		value = getRequestNo().compareTo(connectionRequest.getRequestNo());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ConnectionRequest)) {
			return false;
		}

		ConnectionRequest connectionRequest = (ConnectionRequest)object;

		long primaryKey = connectionRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_setModifiedDate = false;
		_originalRequestNo = _requestNo;

		_originalMobileNo = _mobileNo;

		_originalEmailId = _emailId;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ConnectionRequest> toCacheModel() {
		ConnectionRequestCacheModel connectionRequestCacheModel =
			new ConnectionRequestCacheModel();

		connectionRequestCacheModel.uuid = getUuid();

		String uuid = connectionRequestCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			connectionRequestCacheModel.uuid = null;
		}

		connectionRequestCacheModel.connectionRequestId =
			getConnectionRequestId();

		connectionRequestCacheModel.groupId = getGroupId();

		connectionRequestCacheModel.companyId = getCompanyId();

		connectionRequestCacheModel.userId = getUserId();

		connectionRequestCacheModel.userName = getUserName();

		String userName = connectionRequestCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			connectionRequestCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			connectionRequestCacheModel.createDate = createDate.getTime();
		}
		else {
			connectionRequestCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			connectionRequestCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			connectionRequestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		connectionRequestCacheModel.requestNo = getRequestNo();

		String requestNo = connectionRequestCacheModel.requestNo;

		if ((requestNo != null) && (requestNo.length() == 0)) {
			connectionRequestCacheModel.requestNo = null;
		}

		connectionRequestCacheModel.mobileNo = getMobileNo();

		String mobileNo = connectionRequestCacheModel.mobileNo;

		if ((mobileNo != null) && (mobileNo.length() == 0)) {
			connectionRequestCacheModel.mobileNo = null;
		}

		connectionRequestCacheModel.emailId = getEmailId();

		String emailId = connectionRequestCacheModel.emailId;

		if ((emailId != null) && (emailId.length() == 0)) {
			connectionRequestCacheModel.emailId = null;
		}

		Date requestDate = getRequestDate();

		if (requestDate != null) {
			connectionRequestCacheModel.requestDate = requestDate.getTime();
		}
		else {
			connectionRequestCacheModel.requestDate = Long.MIN_VALUE;
		}

		connectionRequestCacheModel.requestType = getRequestType();

		String requestType = connectionRequestCacheModel.requestType;

		if ((requestType != null) && (requestType.length() == 0)) {
			connectionRequestCacheModel.requestType = null;
		}

		connectionRequestCacheModel.consumerType = getConsumerType();

		String consumerType = connectionRequestCacheModel.consumerType;

		if ((consumerType != null) && (consumerType.length() == 0)) {
			connectionRequestCacheModel.consumerType = null;
		}

		connectionRequestCacheModel.title = getTitle();

		String title = connectionRequestCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			connectionRequestCacheModel.title = null;
		}

		connectionRequestCacheModel.firstName = getFirstName();

		String firstName = connectionRequestCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			connectionRequestCacheModel.firstName = null;
		}

		connectionRequestCacheModel.middleName = getMiddleName();

		String middleName = connectionRequestCacheModel.middleName;

		if ((middleName != null) && (middleName.length() == 0)) {
			connectionRequestCacheModel.middleName = null;
		}

		connectionRequestCacheModel.lastName = getLastName();

		String lastName = connectionRequestCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			connectionRequestCacheModel.lastName = null;
		}

		connectionRequestCacheModel.sonDaughterWife = getSonDaughterWife();

		String sonDaughterWife = connectionRequestCacheModel.sonDaughterWife;

		if ((sonDaughterWife != null) && (sonDaughterWife.length() == 0)) {
			connectionRequestCacheModel.sonDaughterWife = null;
		}

		connectionRequestCacheModel.fatherOrHusbandName =
			getFatherOrHusbandName();

		String fatherOrHusbandName =
			connectionRequestCacheModel.fatherOrHusbandName;

		if ((fatherOrHusbandName != null) &&
			(fatherOrHusbandName.length() == 0)) {

			connectionRequestCacheModel.fatherOrHusbandName = null;
		}

		connectionRequestCacheModel.firmName = getFirmName();

		String firmName = connectionRequestCacheModel.firmName;

		if ((firmName != null) && (firmName.length() == 0)) {
			connectionRequestCacheModel.firmName = null;
		}

		connectionRequestCacheModel.signatoryName = getSignatoryName();

		String signatoryName = connectionRequestCacheModel.signatoryName;

		if ((signatoryName != null) && (signatoryName.length() == 0)) {
			connectionRequestCacheModel.signatoryName = null;
		}

		connectionRequestCacheModel.signatoryDesignation =
			getSignatoryDesignation();

		String signatoryDesignation =
			connectionRequestCacheModel.signatoryDesignation;

		if ((signatoryDesignation != null) &&
			(signatoryDesignation.length() == 0)) {

			connectionRequestCacheModel.signatoryDesignation = null;
		}

		connectionRequestCacheModel.organizationType = getOrganizationType();

		String organizationType = connectionRequestCacheModel.organizationType;

		if ((organizationType != null) && (organizationType.length() == 0)) {
			connectionRequestCacheModel.organizationType = null;
		}

		Date incorporationDate = getIncorporationDate();

		if (incorporationDate != null) {
			connectionRequestCacheModel.incorporationDate =
				incorporationDate.getTime();
		}
		else {
			connectionRequestCacheModel.incorporationDate = Long.MIN_VALUE;
		}

		connectionRequestCacheModel.gstIn = getGstIn();

		String gstIn = connectionRequestCacheModel.gstIn;

		if ((gstIn != null) && (gstIn.length() == 0)) {
			connectionRequestCacheModel.gstIn = null;
		}

		connectionRequestCacheModel.panNo = getPanNo();

		String panNo = connectionRequestCacheModel.panNo;

		if ((panNo != null) && (panNo.length() == 0)) {
			connectionRequestCacheModel.panNo = null;
		}

		connectionRequestCacheModel.locality = getLocality();

		String locality = connectionRequestCacheModel.locality;

		if ((locality != null) && (locality.length() == 0)) {
			connectionRequestCacheModel.locality = null;
		}

		connectionRequestCacheModel.district = getDistrict();

		String district = connectionRequestCacheModel.district;

		if ((district != null) && (district.length() == 0)) {
			connectionRequestCacheModel.district = null;
		}

		connectionRequestCacheModel.houseNo = getHouseNo();

		String houseNo = connectionRequestCacheModel.houseNo;

		if ((houseNo != null) && (houseNo.length() == 0)) {
			connectionRequestCacheModel.houseNo = null;
		}

		connectionRequestCacheModel.floor = getFloor();

		String floor = connectionRequestCacheModel.floor;

		if ((floor != null) && (floor.length() == 0)) {
			connectionRequestCacheModel.floor = null;
		}

		connectionRequestCacheModel.buildingName = getBuildingName();

		String buildingName = connectionRequestCacheModel.buildingName;

		if ((buildingName != null) && (buildingName.length() == 0)) {
			connectionRequestCacheModel.buildingName = null;
		}

		connectionRequestCacheModel.street = getStreet();

		String street = connectionRequestCacheModel.street;

		if ((street != null) && (street.length() == 0)) {
			connectionRequestCacheModel.street = null;
		}

		connectionRequestCacheModel.colonyArea = getColonyArea();

		String colonyArea = connectionRequestCacheModel.colonyArea;

		if ((colonyArea != null) && (colonyArea.length() == 0)) {
			connectionRequestCacheModel.colonyArea = null;
		}

		connectionRequestCacheModel.landmark = getLandmark();

		String landmark = connectionRequestCacheModel.landmark;

		if ((landmark != null) && (landmark.length() == 0)) {
			connectionRequestCacheModel.landmark = null;
		}

		connectionRequestCacheModel.landmarkDetails = getLandmarkDetails();

		String landmarkDetails = connectionRequestCacheModel.landmarkDetails;

		if ((landmarkDetails != null) && (landmarkDetails.length() == 0)) {
			connectionRequestCacheModel.landmarkDetails = null;
		}

		connectionRequestCacheModel.pinCode = getPinCode();

		String pinCode = connectionRequestCacheModel.pinCode;

		if ((pinCode != null) && (pinCode.length() == 0)) {
			connectionRequestCacheModel.pinCode = null;
		}

		connectionRequestCacheModel.connectionType = getConnectionType();

		String connectionType = connectionRequestCacheModel.connectionType;

		if ((connectionType != null) && (connectionType.length() == 0)) {
			connectionRequestCacheModel.connectionType = null;
		}

		connectionRequestCacheModel.tariffCategory = getTariffCategory();

		String tariffCategory = connectionRequestCacheModel.tariffCategory;

		if ((tariffCategory != null) && (tariffCategory.length() == 0)) {
			connectionRequestCacheModel.tariffCategory = null;
		}

		connectionRequestCacheModel.loadKva = getLoadKva();

		connectionRequestCacheModel.loadKw = getLoadKw();

		connectionRequestCacheModel.areaType = getAreaType();

		String areaType = connectionRequestCacheModel.areaType;

		if ((areaType != null) && (areaType.length() == 0)) {
			connectionRequestCacheModel.areaType = null;
		}

		connectionRequestCacheModel.premisesType = getPremisesType();

		String premisesType = connectionRequestCacheModel.premisesType;

		if ((premisesType != null) && (premisesType.length() == 0)) {
			connectionRequestCacheModel.premisesType = null;
		}

		connectionRequestCacheModel.upicAvailable = isUpicAvailable();

		connectionRequestCacheModel.upic = getUpic();

		String upic = connectionRequestCacheModel.upic;

		if ((upic != null) && (upic.length() == 0)) {
			connectionRequestCacheModel.upic = null;
		}

		connectionRequestCacheModel.wiringTest = isWiringTest();

		connectionRequestCacheModel.wiringCertificate = getWiringCertificate();

		String wiringCertificate =
			connectionRequestCacheModel.wiringCertificate;

		if ((wiringCertificate != null) && (wiringCertificate.length() == 0)) {
			connectionRequestCacheModel.wiringCertificate = null;
		}

		connectionRequestCacheModel.elcbInstalled = isElcbInstalled();

		connectionRequestCacheModel.elcbDocument = getElcbDocument();

		String elcbDocument = connectionRequestCacheModel.elcbDocument;

		if ((elcbDocument != null) && (elcbDocument.length() == 0)) {
			connectionRequestCacheModel.elcbDocument = null;
		}

		connectionRequestCacheModel.stiltParking = isStiltParking();

		connectionRequestCacheModel.height15Mtr = isHeight15Mtr();

		connectionRequestCacheModel.height17Mtr = isHeight17Mtr();

		connectionRequestCacheModel.fcc = isFcc();

		connectionRequestCacheModel.fccCertificate = getFccCertificate();

		String fccCertificate = connectionRequestCacheModel.fccCertificate;

		if ((fccCertificate != null) && (fccCertificate.length() == 0)) {
			connectionRequestCacheModel.fccCertificate = null;
		}

		connectionRequestCacheModel.lift = isLift();

		connectionRequestCacheModel.liftCertificate = getLiftCertificate();

		String liftCertificate = connectionRequestCacheModel.liftCertificate;

		if ((liftCertificate != null) && (liftCertificate.length() == 0)) {
			connectionRequestCacheModel.liftCertificate = null;
		}

		connectionRequestCacheModel.agriConsumer = isAgriConsumer();

		connectionRequestCacheModel.hasBdoCertificate = isHasBdoCertificate();

		connectionRequestCacheModel.bdoCertificate = getBdoCertificate();

		String bdoCertificate = connectionRequestCacheModel.bdoCertificate;

		if ((bdoCertificate != null) && (bdoCertificate.length() == 0)) {
			connectionRequestCacheModel.bdoCertificate = null;
		}

		connectionRequestCacheModel.hasDpccCertificate = isHasDpccCertificate();

		connectionRequestCacheModel.dpccCertificate = getDpccCertificate();

		String dpccCertificate = connectionRequestCacheModel.dpccCertificate;

		if ((dpccCertificate != null) && (dpccCertificate.length() == 0)) {
			connectionRequestCacheModel.dpccCertificate = null;
		}

		connectionRequestCacheModel.hasPollutionCertificate =
			isHasPollutionCertificate();

		connectionRequestCacheModel.pollutionCertificate =
			getPollutionCertificate();

		String pollutionCertificate =
			connectionRequestCacheModel.pollutionCertificate;

		if ((pollutionCertificate != null) &&
			(pollutionCertificate.length() == 0)) {

			connectionRequestCacheModel.pollutionCertificate = null;
		}

		connectionRequestCacheModel.eServiceOnMail = isEServiceOnMail();

		connectionRequestCacheModel.eServiceMailId = getEServiceMailId();

		String eServiceMailId = connectionRequestCacheModel.eServiceMailId;

		if ((eServiceMailId != null) && (eServiceMailId.length() == 0)) {
			connectionRequestCacheModel.eServiceMailId = null;
		}

		connectionRequestCacheModel.applicantPhoto = getApplicantPhoto();

		String applicantPhoto = connectionRequestCacheModel.applicantPhoto;

		if ((applicantPhoto != null) && (applicantPhoto.length() == 0)) {
			connectionRequestCacheModel.applicantPhoto = null;
		}

		connectionRequestCacheModel.applicantSignature =
			getApplicantSignature();

		connectionRequestCacheModel.idProofType = getIdProofType();

		String idProofType = connectionRequestCacheModel.idProofType;

		if ((idProofType != null) && (idProofType.length() == 0)) {
			connectionRequestCacheModel.idProofType = null;
		}

		connectionRequestCacheModel.idProofNo = getIdProofNo();

		String idProofNo = connectionRequestCacheModel.idProofNo;

		if ((idProofNo != null) && (idProofNo.length() == 0)) {
			connectionRequestCacheModel.idProofNo = null;
		}

		connectionRequestCacheModel.idProofDocument = getIdProofDocument();

		String idProofDocument = connectionRequestCacheModel.idProofDocument;

		if ((idProofDocument != null) && (idProofDocument.length() == 0)) {
			connectionRequestCacheModel.idProofDocument = null;
		}

		connectionRequestCacheModel.ownershipProofType =
			getOwnershipProofType();

		String ownershipProofType =
			connectionRequestCacheModel.ownershipProofType;

		if ((ownershipProofType != null) &&
			(ownershipProofType.length() == 0)) {

			connectionRequestCacheModel.ownershipProofType = null;
		}

		connectionRequestCacheModel.ownershipProofDocument =
			getOwnershipProofDocument();

		String ownershipProofDocument =
			connectionRequestCacheModel.ownershipProofDocument;

		if ((ownershipProofDocument != null) &&
			(ownershipProofDocument.length() == 0)) {

			connectionRequestCacheModel.ownershipProofDocument = null;
		}

		connectionRequestCacheModel.selfDeclaration = isSelfDeclaration();

		Date selfDeclarationTime = getSelfDeclarationTime();

		if (selfDeclarationTime != null) {
			connectionRequestCacheModel.selfDeclarationTime =
				selfDeclarationTime.getTime();
		}
		else {
			connectionRequestCacheModel.selfDeclarationTime = Long.MIN_VALUE;
		}

		connectionRequestCacheModel.bpNumber = getBpNumber();

		String bpNumber = connectionRequestCacheModel.bpNumber;

		if ((bpNumber != null) && (bpNumber.length() == 0)) {
			connectionRequestCacheModel.bpNumber = null;
		}

		connectionRequestCacheModel.orderNo = getOrderNo();

		String orderNo = connectionRequestCacheModel.orderNo;

		if ((orderNo != null) && (orderNo.length() == 0)) {
			connectionRequestCacheModel.orderNo = null;
		}

		connectionRequestCacheModel.documentUploaded = getDocumentUploaded();

		String documentUploaded = connectionRequestCacheModel.documentUploaded;

		if ((documentUploaded != null) && (documentUploaded.length() == 0)) {
			connectionRequestCacheModel.documentUploaded = null;
		}

		connectionRequestCacheModel.sapOrderGenerated = getSapOrderGenerated();

		String sapOrderGenerated =
			connectionRequestCacheModel.sapOrderGenerated;

		if ((sapOrderGenerated != null) && (sapOrderGenerated.length() == 0)) {
			connectionRequestCacheModel.sapOrderGenerated = null;
		}

		return connectionRequestCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ConnectionRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ConnectionRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ConnectionRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ConnectionRequest)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ConnectionRequest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ConnectionRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ConnectionRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ConnectionRequest)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ConnectionRequest>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _connectionRequestId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _requestNo;
	private String _originalRequestNo;
	private String _mobileNo;
	private String _originalMobileNo;
	private String _emailId;
	private String _originalEmailId;
	private Date _requestDate;
	private String _requestType;
	private String _consumerType;
	private String _title;
	private String _firstName;
	private String _middleName;
	private String _lastName;
	private String _sonDaughterWife;
	private String _fatherOrHusbandName;
	private String _firmName;
	private String _signatoryName;
	private String _signatoryDesignation;
	private String _organizationType;
	private Date _incorporationDate;
	private String _gstIn;
	private String _panNo;
	private String _locality;
	private String _district;
	private String _houseNo;
	private String _floor;
	private String _buildingName;
	private String _street;
	private String _colonyArea;
	private String _landmark;
	private String _landmarkDetails;
	private String _pinCode;
	private String _connectionType;
	private String _tariffCategory;
	private float _loadKva;
	private float _loadKw;
	private String _areaType;
	private String _premisesType;
	private boolean _upicAvailable;
	private String _upic;
	private boolean _wiringTest;
	private String _wiringCertificate;
	private boolean _elcbInstalled;
	private String _elcbDocument;
	private boolean _stiltParking;
	private boolean _height15Mtr;
	private boolean _height17Mtr;
	private boolean _fcc;
	private String _fccCertificate;
	private boolean _lift;
	private String _liftCertificate;
	private boolean _agriConsumer;
	private boolean _hasBdoCertificate;
	private String _bdoCertificate;
	private boolean _hasDpccCertificate;
	private String _dpccCertificate;
	private boolean _hasPollutionCertificate;
	private String _pollutionCertificate;
	private boolean _eServiceOnMail;
	private String _eServiceMailId;
	private String _applicantPhoto;
	private long _applicantSignature;
	private String _idProofType;
	private String _idProofNo;
	private String _idProofDocument;
	private String _ownershipProofType;
	private String _ownershipProofDocument;
	private boolean _selfDeclaration;
	private Date _selfDeclarationTime;
	private String _bpNumber;
	private String _orderNo;
	private String _documentUploaded;
	private String _sapOrderGenerated;
	private long _columnBitmask;
	private ConnectionRequest _escapedModel;

}