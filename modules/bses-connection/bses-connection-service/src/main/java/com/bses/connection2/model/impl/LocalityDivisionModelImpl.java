/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bses.connection2.model.impl;

import com.bses.connection2.model.LocalityDivision;
import com.bses.connection2.model.LocalityDivisionModel;
import com.bses.connection2.model.LocalityDivisionSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LocalityDivision service. Represents a row in the &quot;bsesconn_LocalityDivision&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LocalityDivisionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LocalityDivisionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LocalityDivisionImpl
 * @generated
 */
@JSON(strict = true)
public class LocalityDivisionModelImpl
	extends BaseModelImpl<LocalityDivision> implements LocalityDivisionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a locality division model instance should use the <code>LocalityDivision</code> interface instead.
	 */
	public static final String TABLE_NAME = "bsesconn_LocalityDivision";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"localityDivisionId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"localityName", Types.VARCHAR}, {"divisionCode", Types.VARCHAR},
		{"divisionName", Types.VARCHAR}, {"complaintCenter", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("localityDivisionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("localityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("divisionCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("divisionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("complaintCenter", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table bsesconn_LocalityDivision (uuid_ VARCHAR(75) null,localityDivisionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,localityName VARCHAR(75) null,divisionCode VARCHAR(75) null,divisionName VARCHAR(75) null,complaintCenter VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table bsesconn_LocalityDivision";

	public static final String ORDER_BY_JPQL =
		" ORDER BY localityDivision.localityDivisionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY bsesconn_LocalityDivision.localityDivisionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.bses.connection2.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.bses.connection2.model.LocalityDivision"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.bses.connection2.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.bses.connection2.model.LocalityDivision"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.bses.connection2.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.bses.connection2.model.LocalityDivision"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long COMPLAINTCENTER_COLUMN_BITMASK = 2L;

	public static final long DIVISIONCODE_COLUMN_BITMASK = 4L;

	public static final long DIVISIONNAME_COLUMN_BITMASK = 8L;

	public static final long GROUPID_COLUMN_BITMASK = 16L;

	public static final long LOCALITYNAME_COLUMN_BITMASK = 32L;

	public static final long UUID_COLUMN_BITMASK = 64L;

	public static final long LOCALITYDIVISIONID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LocalityDivision toModel(LocalityDivisionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LocalityDivision model = new LocalityDivisionImpl();

		model.setUuid(soapModel.getUuid());
		model.setLocalityDivisionId(soapModel.getLocalityDivisionId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLocalityName(soapModel.getLocalityName());
		model.setDivisionCode(soapModel.getDivisionCode());
		model.setDivisionName(soapModel.getDivisionName());
		model.setComplaintCenter(soapModel.getComplaintCenter());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LocalityDivision> toModels(
		LocalityDivisionSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<LocalityDivision> models = new ArrayList<LocalityDivision>(
			soapModels.length);

		for (LocalityDivisionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.bses.connection2.service.util.ServiceProps.get(
			"lock.expiration.time.com.bses.connection2.model.LocalityDivision"));

	public LocalityDivisionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _localityDivisionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLocalityDivisionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _localityDivisionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LocalityDivision.class;
	}

	@Override
	public String getModelClassName() {
		return LocalityDivision.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LocalityDivision, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LocalityDivision, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LocalityDivision, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LocalityDivision)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LocalityDivision, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LocalityDivision, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LocalityDivision)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LocalityDivision, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LocalityDivision, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LocalityDivision>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LocalityDivision.class.getClassLoader(), LocalityDivision.class,
			ModelWrapper.class);

		try {
			Constructor<LocalityDivision> constructor =
				(Constructor<LocalityDivision>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LocalityDivision, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LocalityDivision, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LocalityDivision, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<LocalityDivision, Object>>();
		Map<String, BiConsumer<LocalityDivision, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<LocalityDivision, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<LocalityDivision, Object>() {

				@Override
				public Object apply(LocalityDivision localityDivision) {
					return localityDivision.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<LocalityDivision, Object>() {

				@Override
				public void accept(
					LocalityDivision localityDivision, Object uuidObject) {

					localityDivision.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"localityDivisionId",
			new Function<LocalityDivision, Object>() {

				@Override
				public Object apply(LocalityDivision localityDivision) {
					return localityDivision.getLocalityDivisionId();
				}

			});
		attributeSetterBiConsumers.put(
			"localityDivisionId",
			new BiConsumer<LocalityDivision, Object>() {

				@Override
				public void accept(
					LocalityDivision localityDivision,
					Object localityDivisionIdObject) {

					localityDivision.setLocalityDivisionId(
						(Long)localityDivisionIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<LocalityDivision, Object>() {

				@Override
				public Object apply(LocalityDivision localityDivision) {
					return localityDivision.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<LocalityDivision, Object>() {

				@Override
				public void accept(
					LocalityDivision localityDivision, Object groupIdObject) {

					localityDivision.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<LocalityDivision, Object>() {

				@Override
				public Object apply(LocalityDivision localityDivision) {
					return localityDivision.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<LocalityDivision, Object>() {

				@Override
				public void accept(
					LocalityDivision localityDivision, Object companyIdObject) {

					localityDivision.setCompanyId((Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<LocalityDivision, Object>() {

				@Override
				public Object apply(LocalityDivision localityDivision) {
					return localityDivision.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<LocalityDivision, Object>() {

				@Override
				public void accept(
					LocalityDivision localityDivision, Object userIdObject) {

					localityDivision.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<LocalityDivision, Object>() {

				@Override
				public Object apply(LocalityDivision localityDivision) {
					return localityDivision.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<LocalityDivision, Object>() {

				@Override
				public void accept(
					LocalityDivision localityDivision, Object userNameObject) {

					localityDivision.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<LocalityDivision, Object>() {

				@Override
				public Object apply(LocalityDivision localityDivision) {
					return localityDivision.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<LocalityDivision, Object>() {

				@Override
				public void accept(
					LocalityDivision localityDivision,
					Object createDateObject) {

					localityDivision.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<LocalityDivision, Object>() {

				@Override
				public Object apply(LocalityDivision localityDivision) {
					return localityDivision.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<LocalityDivision, Object>() {

				@Override
				public void accept(
					LocalityDivision localityDivision,
					Object modifiedDateObject) {

					localityDivision.setModifiedDate((Date)modifiedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"localityName",
			new Function<LocalityDivision, Object>() {

				@Override
				public Object apply(LocalityDivision localityDivision) {
					return localityDivision.getLocalityName();
				}

			});
		attributeSetterBiConsumers.put(
			"localityName",
			new BiConsumer<LocalityDivision, Object>() {

				@Override
				public void accept(
					LocalityDivision localityDivision,
					Object localityNameObject) {

					localityDivision.setLocalityName(
						(String)localityNameObject);
				}

			});
		attributeGetterFunctions.put(
			"divisionCode",
			new Function<LocalityDivision, Object>() {

				@Override
				public Object apply(LocalityDivision localityDivision) {
					return localityDivision.getDivisionCode();
				}

			});
		attributeSetterBiConsumers.put(
			"divisionCode",
			new BiConsumer<LocalityDivision, Object>() {

				@Override
				public void accept(
					LocalityDivision localityDivision,
					Object divisionCodeObject) {

					localityDivision.setDivisionCode(
						(String)divisionCodeObject);
				}

			});
		attributeGetterFunctions.put(
			"divisionName",
			new Function<LocalityDivision, Object>() {

				@Override
				public Object apply(LocalityDivision localityDivision) {
					return localityDivision.getDivisionName();
				}

			});
		attributeSetterBiConsumers.put(
			"divisionName",
			new BiConsumer<LocalityDivision, Object>() {

				@Override
				public void accept(
					LocalityDivision localityDivision,
					Object divisionNameObject) {

					localityDivision.setDivisionName(
						(String)divisionNameObject);
				}

			});
		attributeGetterFunctions.put(
			"complaintCenter",
			new Function<LocalityDivision, Object>() {

				@Override
				public Object apply(LocalityDivision localityDivision) {
					return localityDivision.getComplaintCenter();
				}

			});
		attributeSetterBiConsumers.put(
			"complaintCenter",
			new BiConsumer<LocalityDivision, Object>() {

				@Override
				public void accept(
					LocalityDivision localityDivision,
					Object complaintCenterObject) {

					localityDivision.setComplaintCenter(
						(String)complaintCenterObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getLocalityDivisionId() {
		return _localityDivisionId;
	}

	@Override
	public void setLocalityDivisionId(long localityDivisionId) {
		_columnBitmask = -1L;

		_localityDivisionId = localityDivisionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLocalityName() {
		if (_localityName == null) {
			return "";
		}
		else {
			return _localityName;
		}
	}

	@Override
	public void setLocalityName(String localityName) {
		_columnBitmask |= LOCALITYNAME_COLUMN_BITMASK;

		if (_originalLocalityName == null) {
			_originalLocalityName = _localityName;
		}

		_localityName = localityName;
	}

	public String getOriginalLocalityName() {
		return GetterUtil.getString(_originalLocalityName);
	}

	@JSON
	@Override
	public String getDivisionCode() {
		if (_divisionCode == null) {
			return "";
		}
		else {
			return _divisionCode;
		}
	}

	@Override
	public void setDivisionCode(String divisionCode) {
		_columnBitmask |= DIVISIONCODE_COLUMN_BITMASK;

		if (_originalDivisionCode == null) {
			_originalDivisionCode = _divisionCode;
		}

		_divisionCode = divisionCode;
	}

	public String getOriginalDivisionCode() {
		return GetterUtil.getString(_originalDivisionCode);
	}

	@JSON
	@Override
	public String getDivisionName() {
		if (_divisionName == null) {
			return "";
		}
		else {
			return _divisionName;
		}
	}

	@Override
	public void setDivisionName(String divisionName) {
		_columnBitmask |= DIVISIONNAME_COLUMN_BITMASK;

		if (_originalDivisionName == null) {
			_originalDivisionName = _divisionName;
		}

		_divisionName = divisionName;
	}

	public String getOriginalDivisionName() {
		return GetterUtil.getString(_originalDivisionName);
	}

	@JSON
	@Override
	public String getComplaintCenter() {
		if (_complaintCenter == null) {
			return "";
		}
		else {
			return _complaintCenter;
		}
	}

	@Override
	public void setComplaintCenter(String complaintCenter) {
		_columnBitmask |= COMPLAINTCENTER_COLUMN_BITMASK;

		if (_originalComplaintCenter == null) {
			_originalComplaintCenter = _complaintCenter;
		}

		_complaintCenter = complaintCenter;
	}

	public String getOriginalComplaintCenter() {
		return GetterUtil.getString(_originalComplaintCenter);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(LocalityDivision.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LocalityDivision.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LocalityDivision toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LocalityDivision>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LocalityDivisionImpl localityDivisionImpl = new LocalityDivisionImpl();

		localityDivisionImpl.setUuid(getUuid());
		localityDivisionImpl.setLocalityDivisionId(getLocalityDivisionId());
		localityDivisionImpl.setGroupId(getGroupId());
		localityDivisionImpl.setCompanyId(getCompanyId());
		localityDivisionImpl.setUserId(getUserId());
		localityDivisionImpl.setUserName(getUserName());
		localityDivisionImpl.setCreateDate(getCreateDate());
		localityDivisionImpl.setModifiedDate(getModifiedDate());
		localityDivisionImpl.setLocalityName(getLocalityName());
		localityDivisionImpl.setDivisionCode(getDivisionCode());
		localityDivisionImpl.setDivisionName(getDivisionName());
		localityDivisionImpl.setComplaintCenter(getComplaintCenter());

		localityDivisionImpl.resetOriginalValues();

		return localityDivisionImpl;
	}

	@Override
	public int compareTo(LocalityDivision localityDivision) {
		int value = 0;

		if (getLocalityDivisionId() <
				localityDivision.getLocalityDivisionId()) {

			value = -1;
		}
		else if (getLocalityDivisionId() >
					localityDivision.getLocalityDivisionId()) {

			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof LocalityDivision)) {
			return false;
		}

		LocalityDivision localityDivision = (LocalityDivision)object;

		long primaryKey = localityDivision.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_setModifiedDate = false;
		_originalLocalityName = _localityName;

		_originalDivisionCode = _divisionCode;

		_originalDivisionName = _divisionName;

		_originalComplaintCenter = _complaintCenter;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<LocalityDivision> toCacheModel() {
		LocalityDivisionCacheModel localityDivisionCacheModel =
			new LocalityDivisionCacheModel();

		localityDivisionCacheModel.uuid = getUuid();

		String uuid = localityDivisionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			localityDivisionCacheModel.uuid = null;
		}

		localityDivisionCacheModel.localityDivisionId = getLocalityDivisionId();

		localityDivisionCacheModel.groupId = getGroupId();

		localityDivisionCacheModel.companyId = getCompanyId();

		localityDivisionCacheModel.userId = getUserId();

		localityDivisionCacheModel.userName = getUserName();

		String userName = localityDivisionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			localityDivisionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			localityDivisionCacheModel.createDate = createDate.getTime();
		}
		else {
			localityDivisionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			localityDivisionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			localityDivisionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		localityDivisionCacheModel.localityName = getLocalityName();

		String localityName = localityDivisionCacheModel.localityName;

		if ((localityName != null) && (localityName.length() == 0)) {
			localityDivisionCacheModel.localityName = null;
		}

		localityDivisionCacheModel.divisionCode = getDivisionCode();

		String divisionCode = localityDivisionCacheModel.divisionCode;

		if ((divisionCode != null) && (divisionCode.length() == 0)) {
			localityDivisionCacheModel.divisionCode = null;
		}

		localityDivisionCacheModel.divisionName = getDivisionName();

		String divisionName = localityDivisionCacheModel.divisionName;

		if ((divisionName != null) && (divisionName.length() == 0)) {
			localityDivisionCacheModel.divisionName = null;
		}

		localityDivisionCacheModel.complaintCenter = getComplaintCenter();

		String complaintCenter = localityDivisionCacheModel.complaintCenter;

		if ((complaintCenter != null) && (complaintCenter.length() == 0)) {
			localityDivisionCacheModel.complaintCenter = null;
		}

		return localityDivisionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LocalityDivision, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LocalityDivision, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LocalityDivision, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LocalityDivision)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LocalityDivision, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LocalityDivision, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LocalityDivision, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LocalityDivision)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LocalityDivision>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _localityDivisionId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _localityName;
	private String _originalLocalityName;
	private String _divisionCode;
	private String _originalDivisionCode;
	private String _divisionName;
	private String _originalDivisionName;
	private String _complaintCenter;
	private String _originalComplaintCenter;
	private long _columnBitmask;
	private LocalityDivision _escapedModel;

}